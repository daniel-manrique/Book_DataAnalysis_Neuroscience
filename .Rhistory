x = Gfap_IntDen,
y = Pdgfrb_IntDen,
color = DPI,
tooltip = paste("GFAP:", Gfap_IntDen, "<br>PDGFR-β:", Pdgfrb_IntDen, "<br>DPI:", DPI),
data_id = rownames(cell_data)
)
) +
geom_point_interactive(size = 3) +
scale_color_viridis(discrete = TRUE, option = "viridis") +
labs(
title = "",
subtitle = "Scatterplot",
x = "GFAP intensity",
y = "PDGFR-β intensity"
) +
geom_smooth_interactive(
tooltip="Fitted line",
data_id="Fitted line",
method = "lm",
color = "red",
fill = "lightblue",
se = TRUE
) +
Plot_theme +
theme(
legend.position = "top",
legend.direction = "horizontal"
)
# Render the interactive graph using girafe()
girafe(ggobj = Pdgfrb_Gfap_scatter,
width_svg = 5,
height_svg = 5)
#| label: fig-cell_data_scatter_covariance_EDA
#| fig-cap: Exploratory data visualization for PDGFR-β and GFAP covariation (scatter plot)
#| fig-width: 4
#| fig-height: 4
#| warning: false
#| message: false
library(ggplot2)
library(ggiraph)
library(viridis)
# Create the ggplot object with interactive elements
Pdgfrb_Gfap_scatter <- ggplot(
data = cell_data,
aes(
x = Gfap_IntDen,
y = Pdgfrb_IntDen,
color = DPI,
tooltip = paste("GFAP:", Gfap_IntDen, "<br>PDGFR-β:", Pdgfrb_IntDen, "<br>DPI:", DPI),
data_id = rownames(cell_data)
)
) +
geom_point_interactive(size = 3) +
scale_color_viridis(discrete = TRUE, option = "viridis") +
labs(
title = "",
subtitle = "Scatterplot",
x = "GFAP intensity",
y = "PDGFR-β intensity"
) +
geom_smooth_interactive(
tooltip="Fitted line",
data_id="Fitted line",
method = "lm",
color = "red",
se = FALSE
) +
Plot_theme +
theme(
legend.position = "top",
legend.direction = "horizontal"
)
# Render the interactive graph using girafe()
girafe(ggobj = Pdgfrb_Gfap_scatter,
width_svg = 5,
height_svg = 5)
# Load necessary library
library(ggplot2)
# Example 1: Linear relationship
set.seed(123)
x_linear <- seq(1, 100, by = 1)
y_linear <- 5 + 2 * x_linear + rnorm(100, mean = 0, sd = 10) # Linear relationship
# Example 2: Non-linear relationship
x_nonlinear <- seq(1, 100, by = 1)
y_nonlinear <- 5 + 2 * x_nonlinear + 0.1 * x_nonlinear^2 + rnorm(100, mean = 0, sd = 10)
# Combine data
data_linear <- data.frame(x = x_linear, y = y_linear, type = "Linear Relationship")
data_nonlinear <- data.frame(x = x_nonlinear, y = y_nonlinear, type = "Non-linear Relationship")
data <- rbind(data_linear, data_nonlinear)
# Plot
ggplot(data, aes(x = x, y = y)) +
geom_point(alpha = 0.7) +
facet_wrap(~type) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Assessing Linearity",
x = "Predictor (x)",
y = "Response (y)"
) +
theme_minimal()
#| label: fig-assumtions_linearity_scatter
#| fig-cap: Comparison between a linear and non linear trend
#| fig-width: 10
#| fig-height: 6
#| warning: false
#| message: false
library(ggplot2)
# We simulate a linear relatioship
set.seed(123)
x_linear <- seq(1, 100, by = 1)
y_linear <- 5 + 2 * x_linear + rnorm(100, mean = 0, sd = 10) # Linear relationship
# We simulate a non-linear relationship
x_nonlinear <- seq(1, 100, by = 1)
y_nonlinear <- 5 + 2 * x_nonlinear + 0.1 * x_nonlinear^2 + rnorm(100, mean = 0, sd = 10)
# We merge the data in a single dataframe
data_linear <- data.frame(x = x_linear, y = y_linear, type = "Linear Relationship")
data_nonlinear <- data.frame(x = x_nonlinear, y = y_nonlinear, type = "Non-linear Relationship")
data <- rbind(data_linear, data_nonlinear)
# We plot using ggplot
ggplot(data, aes(x = x, y = y)) +
geom_point(alpha = 0.7) +
facet_wrap(~type) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Assessing Linearity",
x = "Predictor (x)",
y = "Response (y)"
) +
Plot_theme
#| label: fig-assumtions_linearity_residuals
#| fig-cap: Comparison between a linear and non linear trend
#| fig-width: 10
#| fig-height: 6
#| warning: false
#| message: false
# Fit models
model_linear <- lm(y_linear ~ x_linear)
model_nonlinear <- lm(y_nonlinear ~ x_nonlinear)
# Residuals
data_residuals <- data.frame(
x = c(x_linear, x_nonlinear),
residuals = c(residuals(model_linear), residuals(model_nonlinear)),
type = rep(c("Linear Relationship", "Non-linear Relationship"), each = 100)
)
# Residual plot
ggplot(data_residuals, aes(x = x, y = residuals)) +
geom_point(alpha = 0.7) +
facet_wrap(~type) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(
title = "Residual Plots for Linearity Check",
x = "Predictor (x)",
y = "Residuals"
) +
theme_minimal()
#| label: fig-assumtions_linearity_residuals
#| fig-cap: Comparison between a linear and non linear trend
#| fig-width: 10
#| fig-height: 6
#| warning: false
#| message: false
# We fit models
model_linear <- lm(y_linear ~ x_linear)
model_nonlinear <- lm(y_nonlinear ~ x_nonlinear)
# We calculate residuals
data_residuals <- data.frame(
x = c(x_linear, x_nonlinear),
residuals = c(residuals(model_linear), residuals(model_nonlinear)),
type = rep(c("Linear Relationship", "Non-linear Relationship"), each = 100)
)
# We plot the residuals
ggplot(data_residuals, aes(x = x, y = residuals)) +
geom_point(alpha = 0.7) +
facet_wrap(~type) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(
title = "Residual Plots for Linearity Check",
x = "Predictor (x)",
y = "Residuals"
) +
Plot_theme
#| label: fig-assumtions_linearity_residuals
#| fig-cap: Comparison between a linear and non linear trend
#| fig-width: 10
#| fig-height: 6
#| warning: false
#| message: false
# We fit models
model_linear <- lm(y_linear ~ x_linear)
model_nonlinear <- lm(y_nonlinear ~ x_nonlinear)
# We calculate residuals
data_residuals <- data.frame(
x = c(x_linear, x_nonlinear),
residuals = c(residuals(model_linear), residuals(model_nonlinear)),
type = rep(c("Linear Relationship", "Non-linear Relationship"), each = 100)
)
# We plot the residuals
ggplot(data_residuals, aes(x = x, y = residuals)) +
geom_point(alpha = 0.7) +
facet_wrap(~type) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(
title = "Residual plots for linearity check",
x = "Predictor (x)",
y = "Residuals"
) +
Plot_theme
Plot_theme <- source("functions/plot_theme.R")
View(Plot_theme)
library(ggplot2)
Plot_theme <- theme_classic() +
theme(
plot.title = element_text(size=18, hjust = 0.5, face="bold"),
plot.subtitle = element_text(size = 14, color = "black", face="italic"),
plot.caption = element_text(size = 12, color = "black"),
plot.tag = element_text(size = 18),
axis.line = element_line(colour = "black", linewidth = 1.5, linetype = "solid"),
axis.ticks.length=unit(7,"pt"),
axis.title.x = element_text(colour = "black", size = 16),
axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
axis.ticks.x = element_line(colour = "black", linewidth = 1),
axis.title.y = element_text(colour = "black", size = 16),
axis.text.y = element_text(colour = "black", size = 16),
axis.ticks.y = element_line(colour = "black", linewidth = 1),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(colour="black", face="bold", size=12),
legend.text = element_text(colour="black", size=10),
plot.margin = margin(t = 5,  # Top margin
r = 5,  # Right margin
b = 5,  # Bottom margin
l = 5) # Left margin
)
View(Plot_theme)
#| include: false
library(ggplot2)
Plot_theme <- source("functions/plot_theme.R")
#| include: false
library(ggplot2)
Plot_theme <- load("functions/plot_theme.R")
#| include: false
library(ggplot2)
Plot_theme <- load("functions/plot_theme.R", local = knitr::knit_global())
#| include: false
library(ggplot2)
Plot_theme <- source("functions/plot_theme.R", local = knitr::knit_global())
#| include: false
library(ggplot2)
Plot_theme <- source("functions/plot_theme.R", mode="function")
#| include: false
library(ggplot2)
Plot_theme <- source("functions/plot_theme.R")
Plot_theme
?source
#| include: false
library(ggplot2)
Plot_theme <- source("functions/plot_theme.R$value")
#| include: false
library(ggplot2)
Plot_theme <- source("functions/plot_theme.R")
Plot_theme <- Plot_theme$value
# Load necessary libraries
library(ggplot2)
# Example 1: Independent Data
set.seed(123)
time_independent <- seq(1, 100, by = 1)
response_independent <- 5 + 0.3 * time_independent + rnorm(100, mean = 0, sd = 5)
# Example 2: Autocorrelated Data
response_dependent <- numeric(100)
response_dependent[1] <- 5 + rnorm(1, mean = 0, sd = 5)
for (i in 2:100) {
response_dependent[i] <- 5 + 0.3 * time_independent[i] + 0.8 * response_dependent[i - 1] + rnorm(1, mean = 0, sd = 5)
}
# Combine data
data_independent <- data.frame(time = time_independent, response = response_independent, type = "Independent")
data_dependent <- data.frame(time = time_independent, response = response_dependent, type = "Dependent")
data <- rbind(data_independent, data_dependent)
# Plot
ggplot(data, aes(x = time, y = response)) +
geom_line() +
facet_wrap(~type) +
labs(
title = "Examining Independence of Observations",
x = "Time",
y = "Response"
) +
theme_minimal()
# We generate independent time and response
set.seed(8807)
time_independent <- seq(1, 100, by = 1)
response_independent <- 5 + 0.3 * time_independent + rnorm(100, mean = 0, sd = 5)
# We combine them into a data frame
data_independent <- data.frame(
time = time_independent,
response = response_independent,
type = "Independent"
)
data_independent
library(gt)
# We generate independent time and response
set.seed(8807)
time_independent <- seq(1, 100, by = 1)
response_independent <- 5 + 0.3 * time_independent + rnorm(100, mean = 0, sd = 5)
# We combine them into a data frame
data_independent <- data.frame(
time = time_independent,
response = response_independent,
type = "Independent"
)
data_independent
gt(head(cell_data))
library(gt)
# We generate independent time and response
set.seed(8807)
time_independent <- seq(1, 100, by = 1)
response_independent <- 5 + 0.3 * time_independent + rnorm(100, mean = 0, sd = 5)
# We combine them into a data frame
data_independent <- data.frame(
time = time_independent,
response = response_independent,
type = "Independent"
)
data_independent
gt(head(data_independent))
# Generate dependent data
response_dependent <- numeric(100)
response_dependent[1] <- 5 + rnorm(1, mean = 0, sd = 5) # First value
for (i in 2:100) {
response_dependent[i] <- 5 + 0.3 * time_independent[i] +
0.8 * response_dependent[i - 1] + rnorm(1, mean = 0, sd = 5)
}
# Combine into a data frame
data_dependent <- data.frame(
time = time_independent,
response = response_dependent,
type = "Dependent"
)
gt(head(data_dependent))
#| label: fig-assumptions_independence
#| fig-cap: Comparison between independed and depended observations
#| fig-width: 10
#| fig-height: 6
#| warning: false
#| message: false
library(ggplot2)
# We combine both datasets
data <- rbind(data_independent, data_dependent)
# We visualize data
ggplot(data, aes(x = time, y = response)) +
geom_line() + # Line plot to show sequential patterns
facet_wrap(~type) + # Separate plots for independent and dependent data
labs(
title = "Examining Independence of Observations",
x = "Time",
y = "Response"
) +
Plot_theme
# Load necessary library
library(ggplot2)
# Example 1: Homoscedastic data
set.seed(123)
x_homoscedastic <- seq(1, 100, by = 1)
y_homoscedastic <- 5 + 0.5 * x_homoscedastic + rnorm(100, mean = 0, sd = 10)
# Example 2: Heteroscedastic data
x_heteroscedastic <- seq(1, 100, by = 1)
y_heteroscedastic <- 5 + 0.5 * x_heteroscedastic + rnorm(100, mean = 0, sd = x_heteroscedastic / 5)
# Combine data
data_homo <- data.frame(x = x_homoscedastic, y = y_homoscedastic, type = "Homoscedastic")
data_hetero <- data.frame(x = x_heteroscedastic, y = y_heteroscedastic, type = "Heteroscedastic")
data <- rbind(data_homo, data_hetero)
# Fit linear models
model_homo <- lm(y ~ x, data = data_homo)
model_hetero <- lm(y ~ x, data = data_hetero)
# Residual data for plotting
residual_data <- data.frame(
fitted = c(fitted(model_homo), fitted(model_hetero)),
residuals = c(residuals(model_homo), residuals(model_hetero)),
type = rep(c("Homoscedastic", "Heteroscedastic"), each = 100)
)
# Residual plot
ggplot(residual_data, aes(x = fitted, y = residuals)) +
geom_point(alpha = 0.7) +
facet_wrap(~type) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(
title = "Residual Plots for Diagnosing Homoscedasticity",
x = "Fitted Values",
y = "Residuals"
) +
theme_minimal()
data
The dependent data, shown in @tbl-assumptions-dependent, exhibits a clear increasing trend, driven by the systematic dependence introduced in our simulation.
#| label: fig-assumptions_homoscedasticity
#| fig-cap: Comparison between dependent and independent observations
#| fig-width: 10
#| fig-height: 6
#| warning: false
#| message: false
library(ggplot2)
# We simulate homoscedastic data
set.seed(123)
x_homoscedastic <- seq(1, 100, by = 1)
y_homoscedastic <- 5 + 0.5 * x_homoscedastic + rnorm(100, mean = 0, sd = 10)
# We simulate heteroscedastic data
x_heteroscedastic <- seq(1, 100, by = 1)
y_heteroscedastic <- 5 + 0.5 * x_heteroscedastic + rnorm(100, mean = 0, sd = x_heteroscedastic / 5)
# We combine data
data_homo <- data.frame(x = x_homoscedastic, y = y_homoscedastic, type = "Homoscedastic")
data_hetero <- data.frame(x = x_heteroscedastic, y = y_heteroscedastic, type = "Heteroscedastic")
data <- rbind(data_homo, data_hetero)
# We fit simple linear models
model_homo <- lm(y ~ x, data = data_homo)
model_hetero <- lm(y ~ x, data = data_hetero)
# Residual data for plotting
residual_data <- data.frame(
fitted = c(fitted(model_homo), fitted(model_hetero)),
residuals = c(residuals(model_homo), residuals(model_hetero)),
type = rep(c("Homoscedastic", "Heteroscedastic"), each = 100)
)
# Residual plot
ggplot(residual_data, aes(x = fitted, y = residuals)) +
geom_point(alpha = 0.7) +
facet_wrap(~type) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(
title = "Residual plots for visualizing homoscedasticity",
x = "Fitted Values",
y = "Residuals"
) +
Plot_theme
# Residual data for diagnostics
residual_data <- data.frame(
residuals = c(residuals(model_homo), residuals(model_hetero)),
type = rep(c("Normal Residuals", "Skewed Residuals"), each = 100)
)
# Residual data for diagnostics
residual_data <- data.frame(
residuals = c(residuals(model_homo), residuals(model_hetero)),
type = rep(c("Normal Residuals", "Skewed Residuals"), each = 100)
)
# Histogram of residuals
ggplot(residual_data, aes(x = residuals)) +
geom_histogram(bins = 20, alpha = 0.7, fill = "blue") +
facet_wrap(~type, scales = "free") +
labs(
title = "Histogram of Residuals",
x = "Residuals",
y = "Frequency"
) +
theme_minimal()
# Residual data for diagnostics
residual_data <- data.frame(
residuals = c(residuals(model_homo), residuals(model_hetero)),
type = rep(c("Homoscedastic yesiduals", "Heterocedastic residuals"), each = 100)
)
# Histogram of residuals
ggplot(residual_data, aes(x = residuals)) +
geom_histogram(bins = 20, alpha = 0.7, fill = "blue") +
facet_wrap(~type, scales = "free") +
labs(
title = "Histogram of Residuals",
x = "Residuals",
y = "Frequency"
) +
theme_minimal()
# Residual data for diagnostics
residual_data <- data.frame(
residuals = c(residuals(model_homo), residuals(model_hetero)),
type = rep(c("Homoscedastic yesiduals", "Heterocedastic residuals"), each = 100)
)
# Histogram of residuals
ggplot(residual_data, aes(x = residuals)) +
geom_histogram(bins = 20, alpha = 0.7, fill = "blue") +
facet_wrap(~type, scales = "free") +
labs(
title = "Histogram of Residuals",
x = "Residuals",
y = "Frequency"
) +
Plot_theme
#| label: fig-assumptions_normality
#| fig-cap: Comparison between dependent and independent observations
#| fig-width: 10
#| fig-height: 6
#| warning: false
#| message: false
# We extract the residuals from the models
residual_data <- data.frame(
residuals = c(residuals(model_homo), residuals(model_hetero)),
type = rep(c("Homoscedastic residuals", "Heterocedastic residuals"), each = 100)
)
# We generate histograms
ggplot(residual_data, aes(x = residuals)) +
geom_histogram(bins = 20, alpha = 0.7, fill = "blue") +
facet_wrap(~type, scales = "free") +
labs(
title = "Histogram of Residuals",
x = "Residuals",
y = "Frequency"
) +
Plot_theme
# Generate Q-Q plot for residuals
ggplot(residual_data, aes(sample = residuals)) +
stat_qq() +
stat_qq_line(color = "red") +
facet_wrap(~type) +
labs(
title = "Q-Q Plot of Residuals",
x = "Theoretical Quantiles",
y = "Sample Quantiles"
) +
theme_minimal()
